#13 hours to create dictionary (researching terms, creating straightforward definitions, and typing them out)
#create a dictionary of terms
public_health_dict = {'nih': 'National Institutes of Health, a major biomedical insitution in the US that conducts and funds research to improve public health',
'cdc':'Centers for Disease Control and Prevention',
'sph':'School of Public Health',
'epidemiology': 'the study of the causes and distribution of disease',
'incidence':'the number of new cases of a disease',
'prevalence':'the total presence',
'p-value':'statistic that shows if the study results did not occur due to random chance',
'adr':'Adverse Drug Reaction', 'adhd':'Attention Deficit Hyperactivity Disorder',
'aids':'Acquired Immune Deficiency Syndrome',
'apha':'American Public Health Association',
'cbo':'Community-Based Organization',
'chip':'Children Health Insurance Program',
'ebp':'Evidence-Based Practice',
'ehr':'Electronic Health Record',
'ems':'Emergency Medical Services',
'fda':'Food and Drug Administration',
'fema':'US Federal Emergency Management Agency',
'ffs':'Fee for Service',
'fpl':'Federal Poverty Level',
'fqhc':'Federally Qualified Health Center',
'gis':'Geographic Information System',
'hipaa':'Health Insurance Portability and Accountability Act',
'behavioral risk factor':'behaviors believed to cause or contribute to disease and death outcomes',
'chronic disease':'disease that lasts for 3 months or longer and can worsen over time',
'communicable disease':'disease that is transmitted from person to person',
'determinants of health':'direct causes and risk factors that directly influence a specific health problem',
'pandemic':'disease outbreak in multiple areas or worldwide',
'epidemic':'disease outbreak in a specific geographical area',
'endemic':'disease outbreak that is regularly occurring within an area',
'ace':'Adverse Childhood Experience',
'social determinants of health':'non-medical factors that influence health outcomes',
'prevention':'action to avoid or circumvent an event from happening',
'who':'World Health Organization',
'ebm':'evidence-based medicine',
'ecls':'early childhood longitudinal survey',
'enp':'elderly nutrition program',
'epc':'evidence based practice center',
'er':'emergency room',
'erc':'enhanced residential care',
'erisa':'employee retirement income security act',
'exsped':'expanded service payments for elderly and disabled program',
'gnp':'geriatric nurse practitioner',
'hab':'HIV/AIDS Bureau',
'hbpc':'hospital-based primary care',
'hce':'home care for the elderly',
'cms':'Centers for Medicare and Medicaid Services',
'ffs':'fee for service, where providers are paid for each service they deliver',
'vbc':'value based care, where providers are reimbursed based on the quality, efficiency, and effectiveness of care',
'hds':'health delivery system',
'hic':'health insurance claim',
'hie':'health information exchange',
'hifa':'health insurance flexibility and accountability',
'hrql':'health related quality of life',
'hrsa':'human subject research subcommittee',
'daly':'disability-adjusted life year, which combines years of life lost due to premature mortality and years of life lost due to disability',
'yll':'years of life lost',
'yld':'years of life lost due to disability',
'qaly':'quality adjusted life year',
'pfizer':'COVID-19 vaccine', 
'moderna':'COVID-19 vaccine',
'biostatistics':'the science of using mathematical methods to analyze health data',
'morbidity':'presence of disease',
'randomized control trial':'a study in which people are randomly assigned to a group to receive different treatments, used to measure the effectiveness of medical interventions',
'placebo':'a harmless pill, medicine, or procedure that gives a psychological perception of change rather than a physiological effect',
'meta-analysis':'a statistical technique that combines results of multiple scientific studies',
'cohort study':'a research study that follows a group of people over time to see how their exposures affect their outcomes',
'case control study':'a study that compares individuals who have a disease (cases) with others who do not (controls), looking back in time to see how they differ in exposure to potential causes',
'double blind study':'a study where neither the participants nor the experimenters know who is receiving a particular treatment to prevent bias',
'surveillance':'the ongoing, systematic collection, analysis, and interpretation of health related data essential to planning, implementing, and evaluating public health practice',
'disparity':'differences in health outcomes and their causes among different groups of people',
'infectious disease':'diseases caused by organisms such as bacteria, viruses, fungi, or parasites that can spread from person to person',
'immunization':'the process by which a person is made immune or resistant to an infectious disease by administering a vaccine',
'epidemiological transition':'changes in population health patterns where societies move from high rates of infectious diseases to more chronic and lifestyle related diseases',
'health equity':'achieving the highest level of health for all people, ensuring everyone has a fair and just opportunity to be as healthy as possible',
'health literacy':'the ability to obtain, read, and use healthcare information to make appropriate health decisions and follow instructions for treatment',
'vector':'any organism that carries and transmits an infectious pathogen into another living organism',
'zoonosis':'an infectious disease that has jumped from a non-human animal to humans',
'outbreak':'a sudden rise in the amount of a disease in a specific geographic area',
'non-communicable diseases':'diseases that are not passed from person to person, often chronic and progress slowly',
'global health':'health that extends national boundaries and considers health issues from a worldwide perspective',
'health policy':'decisions, plans, and actions undertaken to achieve specific healthcare goals within a society',
'primary healthcare':'a basic level of health care that includes programs directed at the health of the community, such as immunization, maternal and child health care, and family planning',
'telemedicine':'the practice of caring for patients remotely when the provider and patient are not physically present with each other',
'environmental health':'a branch of public health concerned with all aspects of the natural and built environment affecting human health',
'behavioral health':'the study of how behaviors impact health, including areas such as substance abuse, mental health, and physical health',
'health promotion':'the process of enabling people to increase control over and to improve their health',
'epidemiological curve':'a graphical representation showing the number of new cases of a disease over time',
'herd immunity':'resistance to the spread of a contagious disease within a population that results if a sufficiently high proportion of individuals are immune to the diseaase, especially through vaccination',
'health informatics':'the field of study that involves managing and utilizing patient healthcare information and data through computer technology',
'community health':'a field focusing on the health status of the residents of a specific geographic region and ways to improve it',
'palliative care':'specialized medical care focused on providing relief from symptoms and stress of a serious illness',
'incubation period':'the period between exposure to an infection and the appearance of the first symptoms',
'nosocomial infection':'infections that are acquired in hospitals and other healthcare facilities',
'bioburden':'the number of bacteria living on a surface that has not been sterilized',
'demography':'the statistical study of populations, including size and density, distribution, and vital statistics',
'screening':'testing for disease in people without symptoms to identify those at risk of a particular disease',
'vaccine efficacy':'the percentage reduction in a disease in a group of people who received a vaccination in a clinical trial',
'health systems strengthening':'improving health systems to provide more complete, equitable, and effective health services to populations',
'nutritional epidemiology':'the study of the role of nutrition in the cause, occurrence, and prevention of disease',
'one health':'a collaborative, multi-discplinary approach that works locally, nationally, and globally to achieve optimal health outcomes recognizing the interconnection between people, animals, plants, and their shared environment',
'health impact assessment':'a combination of procedures, methods, and tools by which a policy, program, or project may be judged as to its potential effects on the health of a population',
'sentinel surveillance':'the use of selected institutions to monitor and report cases of a disease which provides an indication of the larger health status of the surrounding community',
'universal health coverage':'ensuring that all people have access to needed health services including preveniton, promotion, treatment, rehabilitation, and palliation without suffering financial hardship when paying for them',
 'global burden of disease':'comprehensive regional and global assessment of mortality and disability from major diseases, injuries, and risk factors',
'mhealth':'use of mobile and wireless technologies to support the achievement of health objectives',
'precision medicine':'an approach to patient care that allows doctors to select treatments that are most likely to help patients based on a genetic understanding of their disease',
'secondary care':'health services provided by medical specialists and other health professionals who generally do not have first contact with patients, requiring a referral from primary care',
'tertiary care':'specialized healthcare, usually for inpatients and on referral from a primary or secondary health professional, in a facility that has personnel and facilities for advanced medical treatment',
'quarternary care':'extension of tertiary care with advanced levels of medicine which are highly specialized and not widely accessed',
'cross-sectional study':'observational study that analyzes data from a population at a specific point in time',
'prospective study':'an observational study in which participants are followed over time to observe their outcomes',
'retrospective study':'a study that looks backwards in time and examines exposures to suspected risk or protectective factors in relation to an outcome that has been established at the start of the study',
'socioeconomic status':'the social standing of a class of an individual, often measured by a combination of education, income, and occupation',
'stakeholder engagement':'involvement of individuals, groups, or organizations who may be affected by a decision or can influence the outcome',
'syndemic':'synergistic epidemic, two or more afflictions that interact synergistically which contributes to excess burden of disease in a population',
'translational research':'using discoveries from research laboratories to apply to treating patients in healthcare settings',
'undernutrition':'the result of insufficient food intake and repeated infectious diseases that causes being underweight, too short or stunted, too thin, or vitamin/mineral deficient',
'vaccine hesitancy':'delay in acceptance or refusal of vaccines despite availability of vaccine services',
'vector control':'methods to limit or eradicate mammals, birds, or insects that transmit disease',
'viral load':'the number of virus particles in a sample of an organism',
'waste management':'actions required to manage waste from its inception to its final disposal',
'mortality':'death',
'exacerbate':'worsen',
'co-morbid':'simultaneously occurring',
'epidemiological':'relating to diseases',
'intersectionality':'interconnected nature'}

print(public_health_dict)

#check data type
print(type(public_health_dict))

#2.5 hours to create language simplification (research transformers library, write code, and debug code) 
from transformers import pipeline
def simplify_text(text):
    # Using a text simplification model. T5 understands context well. 
    simplifier = pipeline("text2text-generation", model="t5-base", task="text2text-generation")
    return simplifier(text, max_length=100)[0]['generated_text']

    #function that replaces complex jargon in the text with user friendly definitions from my dictionary
def replace_jargon(text, dictionary):
    words = text.split()
    simplified_words = []
    for word in words:
      #handle punctuation and case sensitivity by removing punctuation and converting to lowercase to improve matching with dictionary keys
      stripped_word=word.strip(",.!?") #this removes punctuation
      lowercase_word=stripped_word.lower()#convert to lowercase to match dictionary input, allows for easy dictionary lookup
      if lowercase_word in dictionary:
        #replace word with the dictionary definition
        #preserve the original capitalization
        definition=dictionary[lowercase_word]
        if stripped_word[0].isupper():
          definition=definition.capitalize() #capitalize the first letter if the original was capitalized
        word=word.replace(stripped_word,definition)
      simplified_words.append(word)
    return ' '.join(simplified_words)
    #test case
test_text = "In epidemiology, the incidence of the disease was noted to be rising, which was significant as the p-value was below 0.05, according to WHO standards."
simplified_text = replace_jargon(test_text, public_health_dict)
simplified_text
#output: In the study of what causes a disease outcome and the population distribution of the outcome, the the number of new cases of a disease of the disease was noted to be rising, which was significant as the statistic that shows if the study results are significant and did not occur due to random chance was below 0.05, according to World health organization standards.
#debug spacing error 2 hours 
#Spaces were either ommitted or added incorrectly 
#Research ideas on how to facilitate greater user interaction, code adding and updating terms, removing terms, getting definition of term to promote user interaction, debugging  
#3 hours
#function to add or update term in dictionary 
def add_or_update_term(term, definition):
    if term in public_health_dict:
        action = "updated"
    else:
        action = "added"
    public_health_dict[term] = definition
    return f"Term '{term}' {action} successfully."

# Example 
print(add_or_update_term("Biostatistics", "The application of statistics to a wide range of topics in biology"))
print(add_or_update_term("Epidemiology", "The science that studies the patterns, causes, and effects of health and disease conditions in defined populations"))

# function to remove a term from the dictionary
def remove_term(term):
    if term in public_health_dict:
        del public_health_dict[term]
        return f"Term '{term}' removed successfully."
    else:
        return f"Term '{term}' not found."

# function to get the definition of a term
def get_definition(term):
    return public_health_dict.get(term, "Term not found.")

#Examples 
print(remove_term("Mortality"))
print(get_definition("Epidemiology"))

#output: Term 'Biostatistics' added successfully.
#Term 'Epidemiology' added successfully.
#Term 'Mortality' not found.
#The science that studies the patterns, causes, and effects of health and disease conditions in defined populations

#Updating to be even more advanced by implementing tokenizing (split text into words or sentences), POS tagging (part of speech tagging, like noun, verb, adjective, etc.), and stop words removal (the, is, at) that do not contribute much meaning to a sentence 
#19 hours debugging, coding, and researching NLTK functions 

#import NLTK resources
import nltk
from nltk.tokenize import word_tokenize, sent_tokenize 
from nltk.corpus import stopwords 
from nltk import pos_tag 
import string 

nltk.download ('punkt') #tokenizer model 
nltk.download('averaged_perceptron_tagger') #Part of Speech tagger
nltk.download('stopwords') #stopwords

#alternative text simplification function that is more advanced with NLTK features
def simplify_text_with_nltk(text):
  sentences=sent_tokenize(text)
  simplified_sentences=[]

  #process each sentence 
  for sentence in sentences: 
    #tokenize the sentence into words 
    words=word_tokenize(sentence)

    #remove stopwords 
    stop_words=set(stopwords.words('english'))
    #remove 'and' and 'are' from stopwords to keep it in the text
    stop_words.discard('and')
    stop_words.discard('are')

    #filter words to handle stopwords more selectively 
    filtered_words=[word for word in words if word.lower() not in stop_words]

    #pos tagging 
    tagged_words=pos_tag(filtered_words)

#replace complex words based on dictionary 
    simplified_words=[] #initialize empty list to collect words after processing 
    for word, tag in tagged_words:
    #iterate through each word and its part of speech tag  
            if word in string.punctuation:
                #Handle punctuation separately to avoid unecessary spaces
                if simplified_words and not simplified_words[-1].endswith(' '):
                    simplified_words.append(word)
                else:
                    simplified_words.append(word)
            else:
             #add a space before the word unless the last character in the list is a punctuation mark.
                if simplified_words and not simplified_words[-1].endswith((' ', '.', ',', '!', '?', ':', ';')):
                    simplified_words.append(' ')
                simplified_words.append(public_health_dict.get(word, word))
                #append definition from dictionary if it exists, or the word itself 

            
    #reconstruct simplified sentence 
    simplified_sentence=''.join(simplified_words)
    simplified_sentences.append(simplified_sentence)
     #reconstruct final simplified text using each simplified sentence 
  return''.join(simplified_sentences)

# Example usage 
example_text = "Epidemiology and morbidity are key concepts in public health studies."
print(simplify_text_with_nltk(example_text))

#Edge Cases
#alter who to differ between WHO, the World Health Organization, versus the pronoun "who"
def refine_who(text):
  sentences=sent_tokenize(text)
  refined_text=[]

  for sentence in sentences:
        words = word_tokenize(sentence)
        tagged_words = pos_tag(words)

        new_sentence = []
        for i, (word, tag) in enumerate(tagged_words):
            # check if the current word is 'who' 
            if word.lower() == 'who':
                if tag == 'WP':
                    # if who is a pronoun, append as a pronoun and ensure proper spacing
                    if new_sentence and new_sentence[-1] not in string.punctuation:
                        new_sentence.append(' ')
                    new_sentence.append(word)
                else:
                    # if who is an acronym, apend 'World Health Organization', ensure proper spacing
                    if new_sentence and new_sentence[-1] not in string.punctuation:
                        new_sentence.append(' ')
                    new_sentence.append("World Health Organization")
            else:
                # handle normal words and punctuation
                if word in string.punctuation:
                    # append punctuation directly without a preceding space
                    new_sentence.append(word)
                else:
                    # append words with a space if not the start of the sentence
                    if new_sentence and new_sentence[-1] not in string.punctuation:
                        new_sentence.append(' ')
                    new_sentence.append(word)

# join the words to form the final sentence
        refined_sentence = ''.join(new_sentence)
        refined_text.append(refined_sentence)

  return ' '.join(refined_text)

#Test case 
text="Who is leading the WHO? Who is a part of the WHO?"
print(refine_who(text))

#differentiate between "AIDS" (disease) and "aids" (assistance)
def refine_aids(text):
  sentences=sent_tokenize(text)
  refined_text=[]

  for sentence in sentences: 
    words=word_tokenize(sentence)
    tagged_words=pos_tag(words)

    new_sentence = []
    for i, (word, tag) in enumerate(tagged_words):
            if word.lower() == 'aids':
                if tag == 'NNP': #NPP means proper noun
                    # append as proper noun, ensure proper spacing
                    if new_sentence and new_sentence[-1] not in string.punctuation:
                        new_sentence.append(' ')
                    new_sentence.append("Acquired Immune Deficiency Syndrome")
                else:
                    # append as aids meaning assistance, ensure proper spacing
                    if new_sentence and new_sentence[-1] not in string.punctuation:
                        new_sentence.append(' ')
                    new_sentence.append("assists") #replace aids with synonym 'assists' to decrease confusion 
            else:
                # handle normal words and punctuation
                if word in string.punctuation:
                    # append punctuation directly without a preceding space
                    new_sentence.append(word)
                else:
                    # Append words with a space if it's not the start of the sentence
                    if new_sentence and new_sentence[-1] not in string.punctuation:
                        new_sentence.append(' ')
                    new_sentence.append(word)


       # join the words to form the final sentence
    refined_sentence = ''.join(new_sentence)
    refined_text.append(refined_sentence)

  return ' '.join(refined_text)

#test case
text="He aids people in rural areas who have AIDS."
print(refine_aids(text))
#Output: He assists people in rural areas who have Acquired Immune Deficiency Syndrome.

#11 hours: Research different models (Bart, GPT, Transformers) to implement, experiment with each to see which is best 
#Debug language output error (the output was giving the simplified text in the wrong language, like German or French, or sometimes half of the output was in English and the other half was in French)
#Fine tune the output to be even more simplified by ensuring dictionary definitions are not too superfluous 
#Experiment by trial and error with the practice text to fine tune output 

from transformers import BartForConditionalGeneration, BartTokenizer

def load_model_and_tokenizer(model_name='facebook/bart-large-cnn'):
    """
    loads the BART model and tokenizer.
    """
    tokenizer = BartTokenizer.from_pretrained(model_name)
    model = BartForConditionalGeneration.from_pretrained(model_name)
    return model, tokenizer

def replace_terms_with_definitions(text, dictionary):
    """
    replaces terms in the text with their definitions from the dictionary.
    """
    #split input into individual words
    words = text.split()
    new_words = []
    #iterate through each word to replace with definition 
    for word in words:
        key = word.lower().strip(",.!?") #cleans up word by removing punctuation and making it lowercase
        if key in dictionary:
            new_words.append(dictionary[key] + " (" + word + ")")
        else:
            new_words.append(word) #keep original word if not found in dictionary 
    return ' '.join(new_words) #join new words into one string with spaces

def simplify_text(text, model, tokenizer):
    """
    Simplifies text using the BART model.
    """
    # replace complex terms with definitions before simplification
    text_with_definitions = replace_terms_with_definitions(text, public_health_dict)
    #encode modified text into a compatible input format
    inputs = tokenizer.encode("simplify: " + text_with_definitions, return_tensors="pt", max_length=1024, truncation=True)
    #generate simplified text 
    summary_ids = model.generate(inputs, max_length=200, min_length=40, length_penalty=2.0, num_beams=4, early_stopping=True)
    #decode to text and remove special tokens 
    simplified_text = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
    return simplified_text

def main():
    """
    Main function to execute the script.
    """
    #load model and tokenizer
    model, tokenizer = load_model_and_tokenizer()
    #provide original text
    original_text = "In the context of an ongoing global health crisis, epidemiological studies consistently demonstrate that the prevalence of co-morbid conditions such as hypertension, diabetes mellitus, and chronic respiratory diseases significantly exacerbate the morbidity and mortality rates associated with the novel coronavirus."
    print("Original Text:", original_text)
    #generate and print simplified text 
    simplified_text = simplify_text(original_text, model, tokenizer)
    print("Simplified Text:", simplified_text)

if __name__ == '__main__':
    main()
